import java.io.*;
import java.sql.*;
import java.util.*;

public class MySQLConnectionTest {
    private static final int CHUNK_SIZE = 50; // Number of transaction rows per chunk
    private static final int PARTITION_SIZE = 50; // Number of rows per MD partition

    public static void main(String[] args) {
        // Database credentials
        String dbUrl = "jdbc:mysql://localhost:3306/metro_dw";
        String dbUser = "root";
        String dbPassword = "12345";

        // Paths for input and output files
        String transactionsFile = "C:\\Users\\Muhammad\\Desktop\\Datawarehouse_metro\\MySQLConnectionTest\\src\\transactions.csv"; // Input file path
        String enrichedOutputFile = "enriched_transactions.csv"; // Output file path

        // Create time_id to time mapping (can be expanded)
        Map<Integer, String> timeMapping = createTimeMapping();

        try (Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword)) {
            System.out.println("Connected to MySQL database!");

            // Create output file writer
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(enrichedOutputFile))) {
                // Write header to the output file
                writer.write("TRANSACTION_ID,PRODUCT_ID,PRODUCT_NAME,PRODUCT_PRICE,CUSTOMER_ID,CUSTOMER_NAME,GENDER,STORE_ID,STORE_NAME,SUPPLIER_ID,SUPPLIER_NAME,TIME_ID,TIME,QUANTITY,TOTAL_SALES");
                writer.newLine();

                int transactionOffset = 0;
                boolean moreTransactions = true;

                // Process transactions in chunks
                while (moreTransactions) {
                    // Load the current chunk of transactions
                    List<Map<String, String>> transactionChunk = loadTransactionChunk(transactionsFile, CHUNK_SIZE, transactionOffset);

                    // If no transactions are left, stop the loop
                    if (transactionChunk.isEmpty()) {
                        moreTransactions = false;
                        break;
                    }

                    // Process each partition of MD (Product and Customer data)
                    for (int i = 0; i < PARTITION_SIZE; i++) {
                        // Load customer and product data into memory (disk buffer)
                        Map<Integer, String[]> customerPartition = loadCustomerPartition(conn, i, PARTITION_SIZE);
                        Map<Integer, String[]> productPartition = loadProductPartition(conn, i, PARTITION_SIZE);

                        // Join transaction data with MD
                        for (Map<String, String> transaction : transactionChunk) {
                            int productId = Integer.parseInt(transaction.get("PRODUCT_ID"));
                            int customerId = Integer.parseInt(transaction.get("CUSTOMER_ID"));
                            int timeId = Integer.parseInt(transaction.get("time_id"));

                            String[] customerData = customerPartition.get(customerId);
                            String[] productData = productPartition.get(productId);

                            if (customerData != null && productData != null) {
                                // Enrich transaction data
                                String priceString = productData[1]; // productPrice from product data
                                double price = Double.parseDouble(priceString.replace("$", "").trim());

                                int quantity = Integer.parseInt(transaction.get("QUANTITY"));
                                double totalSales = price * quantity;

                                // Get the actual time value from the time mapping
                                String timeValue = timeMapping.get(timeId);

                                // Write enriched transaction to the output file
                                writer.write(transaction.get("ORDER_ID") + "," + // Transaction ID
                                        productId + "," +
                                        productData[0] + "," + // Product Name
                                        String.format("%.2f", price) + "," +
                                        customerId + "," +
                                        customerData[0] + "," + // Customer Name
                                        customerData[1] + "," + // Customer Gender
                                        productData[4] + "," + // Store ID
                                        productData[5] + "," + // Store Name
                                        productData[2] + "," + // Supplier ID
                                        productData[3] + "," + // Supplier Name
                                        timeId + "," + // Time ID
                                        timeValue + "," + // Actual Time
                                        quantity + "," +
                                        String.format("%.2f", totalSales));
                                writer.newLine();
                            }
                        }
                    }

                    // Increment the offset to move to the next chunk
                    transactionOffset += CHUNK_SIZE;
                }

                System.out.println("MESHJOIN completed! Enriched data saved to " + enrichedOutputFile);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Map time_id to actual time values (you can expand this as needed)
    private static Map<Integer, String> createTimeMapping() {
        Map<Integer, String> timeMapping = new HashMap<>();
        timeMapping.put(1, "3:09");
        timeMapping.put(2, "4:12");
        timeMapping.put(3, "5:06");
        timeMapping.put(4, "5:18");
        timeMapping.put(5, "5:58");
        timeMapping.put(6, "6:02");
        timeMapping.put(7, "6:11");
        // You can add more time_id to time mappings as needed
        return timeMapping;
    }

    // Load chunks of transaction data from CSV file
    private static List<Map<String, String>> loadTransactionChunk(String filePath, int chunkSize, int offset) throws IOException {
        List<Map<String, String>> chunk = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int count = 0;
            int currentRow = 0;

            // Skip the header row
            reader.readLine();

            while ((line = reader.readLine()) != null) {
                if (currentRow < offset) {
                    currentRow++; // Skip rows until the offset
                    continue;
                }

                if (count >= chunkSize) {
                    break;
                }

                String[] fields = line.split(",");
                Map<String, String> transaction = new HashMap<>();
                transaction.put("ORDER_ID", fields[0]); // Transaction ID
                transaction.put("ORDER_DATE", fields[1]);
                transaction.put("PRODUCT_ID", fields[2]);
                transaction.put("CUSTOMER_ID", fields[3]);
                transaction.put("QUANTITY", fields[4]);
                transaction.put("time_id", fields[5]); // Time ID

                chunk.add(transaction);
                count++;
                currentRow++;
            }
        }
        return chunk;
    }

    // Load customer data partition from MySQL
    private static Map<Integer, String[]> loadCustomerPartition(Connection conn, int partitionIndex, int partitionSize) throws SQLException {
        Map<Integer, String[]> customerPartition = new HashMap<>();
        String query = "SELECT * FROM `customers_data (1)` LIMIT ? OFFSET ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, partitionSize);
            stmt.setInt(2, partitionIndex * partitionSize);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                customerPartition.put(rs.getInt("CUSTOMER_ID"),
                        new String[]{rs.getString("CUSTOMER_NAME"), rs.getString("GENDER")});
            }
        }
        return customerPartition;
    }

    // Load product data partition from MySQL
    private static Map<Integer, String[]> loadProductPartition(Connection conn, int partitionIndex, int partitionSize) throws SQLException {
        Map<Integer, String[]> productPartition = new HashMap<>();
        String query = "SELECT productID, productName, productPrice, supplierID, supplierName, storeID, storeName FROM `products_data (1)` LIMIT ? OFFSET ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, partitionSize);
            stmt.setInt(2, partitionIndex * partitionSize);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                productPartition.put(rs.getInt("productID"),
                        new String[]{
                                rs.getString("productName"),
                                rs.getString("productPrice"),
                                rs.getString("supplierID"),
                                rs.getString("supplierName"),
                                rs.getString("storeID"),
                                rs.getString("storeName")
                        });
            }
        }
        return productPartition;
    }
}
